{"version":3,"sources":["../src/index.ts","../src/constants.ts","../src/queries.ts","../src/utils.ts","../src/go.ts"],"sourcesContent":["import * as core from '@actions/core'\nimport path from 'path'\nimport { FileTypes, GITHUB_DOMAIN } from './constants'\nimport { getClient } from './queries'\nimport { getDependencies as getGoDependencies } from './go'\nimport { isFileType } from './utils'\nimport { readFileSync } from 'fs'\nimport { uniqBy } from 'lodash'\n\nexport interface DependencyConfig {\n  owner: string\n  repo: string\n  token: string\n  sourceDir?: string\n}\n\nexport const getDependencies = async (config: DependencyConfig) => {\n  const { owner, repo, token, sourceDir } = config\n  const packageJson: PackageJson[] = []\n  const stackAidJson: StackAidJson = { version: 1, dependencies: [] }\n  let direct = []\n\n  const client = getClient(token)\n  const summary = await client.getRepositorySummary(owner, repo, '**/')\n  for (const {\n    after,\n    node: { filename },\n  } of summary) {\n    switch (true) {\n      case isFileType(filename, FileTypes.go): {\n        core.info(`Found ${filename}, getting Go dependencies`)\n        const parent = `https://${GITHUB_DOMAIN}/${owner}/${repo}`\n        const deps = getGoDependencies(\n          path.dirname(filename),\n          sourceDir\n        ).filter(({ source }) => source !== parent)\n        stackAidJson.dependencies.push(...deps)\n        break\n      }\n      case isFileType(filename, FileTypes.javascript): {\n        core.info(`Found ${filename}, copying dependencies`)\n        const { dependencies, devDependencies } = JSON.parse(\n          readFileSync(path.resolve(sourceDir!, filename), 'utf8')\n        )\n        packageJson.push({ filename, dependencies, devDependencies })\n      }\n      default:\n        direct.push(\n          ...(await client.getRepositoryDependencies(owner, repo, 1, after))\n        )\n        break\n    }\n  }\n\n  // We need to query each direct dependency separately since the graphql API\n  // does NOT support nested dependencies.\n  direct = uniqBy(direct, (d) => d.repository.url)\n  for (const dep of direct) {\n    const {\n      url: source,\n      name,\n      owner: { login: owner },\n    } = dep.repository\n    const summary = await client.getRepositorySummary(owner, name)\n    core.info(`${owner}/${name}: ${summary.map((s) => s.node.filename)}`)\n\n    let indirect: StackAidDependency[] = []\n    for (const { after } of summary) {\n      const deps = await client.getRepositoryDependencies(owner, name, 1, after)\n      indirect.push(...deps.map((d) => ({ source: d.repository.url })))\n    }\n\n    // Dependencies shouldn't be funding themselves.\n    indirect = indirect.filter((d) => d.source !== source)\n    stackAidJson.dependencies.push({\n      source,\n      dependencies: uniqBy(indirect, 'source'),\n    })\n  }\n\n  return { stackAidJson, packageJson }\n}\n","export const GITHUB_DOMAIN = 'github.com'\n\nexport const FileTypes = {\n  go: ['go.mod'],\n  java: ['pom.xml'],\n  javascript: ['package.json'],\n  php: ['composer.json'],\n  python: ['pipfile', 'pyproject.toml', 'setup.py'],\n  ruby: ['gemfile'],\n  rust: ['cargo.toml'],\n}\n\nexport const SUMMARY_FILE_TYPES = Object.values(FileTypes).flat()\n\nexport const DEPENDENCY_FILE_TYPES = [\n  FileTypes.java,\n  FileTypes.php,\n  FileTypes.python,\n  FileTypes.ruby,\n  FileTypes.rust,\n].flat()\n","import * as github from '@actions/github'\nimport gql from 'graphql-tag'\nimport { DEPENDENCY_FILE_TYPES, SUMMARY_FILE_TYPES } from './constants'\nimport {\n  Commit,\n  CreateCommitMutation,\n  CreateCommitMutationVariables,\n  CreateCommitOnBranchInput,\n  GetHeadOidQuery,\n  GetHeadOidQueryVariables,\n  GetRepositoryDependenciesQuery,\n  GetRepositoryDependenciesQueryVariables,\n  GetRepositorySummaryQuery,\n  GetRepositorySummaryQueryVariables,\n} from '../types/graphql'\nimport { matches } from './utils'\nimport { print } from 'graphql'\nimport { uniqBy } from 'lodash'\n\nexport const summaryFragment = gql(`\n  fragment summaryFragment on DependencyGraphManifestConnection {\n    edges\t{\n      cursor\n      node {\n        id\n        filename\n      }\n    }\n  }\n`)\n\nexport const repositoryFragment = gql(`\n  fragment repositoryFragment on DependencyGraphManifestConnection {\n    nodes {\n      filename\n      dependencies {\n        nodes {\n          repository {\n            name\n            owner {\n              login\n            }\n            url\n          }\n          packageManager\n          requirements\n          packageName\n          hasDependencies\n        }\n      }\n    }\n  }\n`)\n\nexport const getClient = (token: string) => {\n  return {\n    octokit: github.getOctokit(token),\n    async graphql(query: string, variables?: Record<string, any>) {\n      const result = await this.octokit.graphql({\n        ...variables,\n        query,\n        headers: {\n          // Required for dependency graph queries, see:\n          // https://docs.github.com/en/graphql/overview/schema-previews#access-to-a-repositories-dependency-graph-preview\n          Accept: 'application/vnd.github.hawkgirl-preview+json',\n        },\n        request: { timeout: 60 * 1000 },\n      })\n\n      return result as any\n    },\n\n    async getRepositorySummaryPage(\n      owner: string,\n      repo: string,\n      cursor: string = ''\n    ) {\n      const result = (await this.graphql(\n        `\n          query getRepositorySummary(\n            $owner: String!\n            $repo: String!\n            $cursor: String\n          ) {\n            repository(owner: $owner, name: $repo) {\n              dependencyGraphManifests(\n                dependenciesFirst: 1\n                withDependencies: true\n                first: 100\n                after: $cursor\n              ) {\n                ...summaryFragment\n              }\n            }\n          }\n          ${print(summaryFragment)}\n        `,\n        { repo, owner, cursor } as GetRepositorySummaryQueryVariables\n      )) as GetRepositorySummaryQuery\n\n      const {\n        dependencyGraphManifests: { edges },\n      } = result.repository\n\n      return edges\n    },\n\n    async getRepositorySummary(owner: string, repo: string, glob: string = '') {\n      let edges = await this.getRepositorySummaryPage(owner, repo)\n      if (!edges.length) {\n        return []\n      }\n\n      let { cursor } = edges[edges.length - 1]\n      while (cursor) {\n        edges = [\n          ...edges,\n          ...(await this.getRepositorySummaryPage(owner, repo, cursor)),\n        ]\n        const next = edges[edges.length - 1].cursor\n        cursor = next !== cursor ? next : ''\n      }\n\n      const relevant = edges\n        .map((edge, i) => ({\n          ...edge,\n          after: i > 0 ? edges[i - 1].cursor : undefined,\n        }))\n        .filter((edge) => matches(edge.node.filename, SUMMARY_FILE_TYPES, glob))\n\n      return relevant\n    },\n\n    async getRepositoryDependencies(\n      owner: string,\n      repo: string,\n      first?: number,\n      after?: string\n    ) {\n      const result = (await this.graphql(\n        `\n          query getRepositoryDependencies(\n            $owner: String!\n            $repo: String!\n            $first: Int\n            $after: String\n          ) {\n            repository(owner: $owner, name: $repo) {\n              dependencyGraphManifests(\n                dependenciesFirst: 1\n                withDependencies: true\n                first: $first\n                after: $after\n              ) {\n                ...repositoryFragment\n              }\n            }\n          }\n          ${print(repositoryFragment)}\n        `,\n        { repo, owner, first, after } as GetRepositoryDependenciesQueryVariables\n      )) as GetRepositoryDependenciesQuery\n\n      const {\n        dependencyGraphManifests: { nodes },\n      } = result.repository\n\n      const dependencies = uniqBy(\n        nodes\n          .filter((n) => matches(n.filename, DEPENDENCY_FILE_TYPES))\n          .flatMap((n) => n.dependencies.nodes)\n          .filter((d) => d.repository?.url),\n        (d) => d.repository.url\n      )\n\n      return dependencies\n    },\n\n    async getHeadOid(owner: string, repo: string) {\n      const result = (await this.graphql(\n        `\n          query getHeadOid($owner: String!, $repo: String!) {\n            repository(owner: $owner, name: $repo) {\n              defaultBranchRef {\n                name\n                target {\n                  ... on Commit {\n                    history(first: 1) {\n                      nodes {\n                        oid\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        `,\n        { owner, repo } as GetHeadOidQueryVariables\n      )) as GetHeadOidQuery\n\n      const { name, target } = result.repository.defaultBranchRef\n      return { name, oid: (target as Commit).history.nodes[0].oid }\n    },\n\n    async createCommit(\n      owner: string,\n      repo: string,\n      input: Partial<CreateCommitOnBranchInput>\n    ) {\n      const { name: branchName, oid } = await this.getHeadOid(owner, repo)\n      const result = (await this.graphql(\n        `\n          mutation createCommit($input: CreateCommitOnBranchInput!) {\n            createCommitOnBranch(input: $input) {\n              commit {\n                url\n              }\n            }\n          }\n        `,\n        {\n          input: {\n            branch: {\n              repositoryNameWithOwner: `${owner}/${repo}`,\n              branchName,\n            },\n            expectedHeadOid: oid,\n            ...input,\n          },\n        } as CreateCommitMutationVariables\n      )) as CreateCommitMutation\n\n      return result.createCommitOnBranch\n    },\n  }\n}\n","import minimatch from 'minimatch'\nimport { FileTypes } from './constants'\n\nexport const matches = (file: string, fileTypes: string[], glob: string = '') =>\n  minimatch(file.toLowerCase(), `${glob}*(${fileTypes.join('|')})`)\n\nexport const isFileType = (\n  filename: string,\n  fileType: typeof FileTypes[keyof typeof FileTypes]\n) => matches(filename, fileType, '**/')\n","import path from 'path'\nimport { GITHUB_DOMAIN } from './constants'\nimport { execSync } from 'child_process'\nimport { uniqBy } from 'lodash'\n\nconst filterDependency = (line: string) => line.startsWith(GITHUB_DOMAIN)\n\nconst parseDependency = (line: string) => {\n  switch (true) {\n    case line.startsWith(GITHUB_DOMAIN):\n      const [domain, owner, repo] = line.split('/')\n      return `https://${domain}/${owner}/${repo}`\n    default:\n      return\n  }\n}\n\nconst parseModuleUrl = (m: string) => {\n  const [url, version = ''] = m.split('@')\n  const [domain, owner, repo] = url.split('/')\n\n  return { module: [domain, owner, repo].join('/'), version }\n}\n\nexport const listDirectDeps = (dir: string, sourceDir: string) => {\n  let output = execSync(\n    `go list -f '{{if not .Indirect}}{{.}}{{end}}' -m all`,\n    { cwd: path.resolve(sourceDir, dir) }\n  ).toString()\n\n  return output\n    .split('\\n')\n    .map((d) => {\n      const [module, version = ''] = d.split(' ')\n      return { module, version }\n    })\n    .filter((entry) => filterDependency(entry.module))\n}\n\nexport const getModuleGraph = (dir: string, sourceDir: string) => {\n  const output = execSync(`go mod graph`, {\n    cwd: path.resolve(sourceDir, dir),\n  }).toString()\n\n  const graph: Record<string, { module: string; version: string }[]> = {}\n\n  output.split('\\n').forEach((line) => {\n    if (!line) {\n      return\n    }\n\n    const [parent, child] = line.split(' ')\n    const mod = parseModuleUrl(parent)\n    const childMod = parseModuleUrl(child)\n\n    const key = `${mod.module}@${mod.version}`\n    graph[key] = graph[key] || []\n\n    if (childMod.module !== key) {\n      graph[key].push(childMod)\n    }\n  })\n\n  Object.entries(graph).forEach(([key, deps]) => {\n    graph[key] = uniqBy(deps, 'module')\n  })\n\n  return graph\n}\n\nexport const getDependencies = (\n  dir: string = '',\n  sourceDir: string = process.cwd()\n) => {\n  const graph = getModuleGraph(dir, sourceDir)\n  const direct = listDirectDeps(dir, sourceDir)\n\n  let dependencies = direct\n    .filter((d) => filterDependency(d.module))\n    .map((d) => {\n      const url = parseModuleUrl(d.module).module\n      const deps = graph[`${url}@${d.version}`] || []\n      return {\n        source: parseDependency(d.module) as string,\n        dependencies: deps\n          .filter((d) => filterDependency(d.module))\n          .map((d) => ({\n            source: parseDependency(d.module) as string,\n          })),\n      }\n    })\n\n  return dependencies as StackAidDependency[]\n}\n"],"mappings":"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","names":["getDependencies","import_path","minimatch","gql","import_lodash","path","module","d","import_lodash","getDependencies","path","owner","summary"]}